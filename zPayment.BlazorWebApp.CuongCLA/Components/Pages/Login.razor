@page "/login"
@using zEVRental.Repositories.CuongCLA.Models
@inject zEVRental.Services.CuongCLA.IServiceProviders _serviceProviders
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateService AuthService
@rendermode InteractiveServer

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="logo-section">
                <i class="fas fa-bolt fa-3x text-primary mb-3"></i>
                <h2 class="mb-1">EV Rental Payment System</h2>
                <p class="text-muted">Sign in to continue</p>
            </div>
        </div>
        
        <div class="login-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                
                <div class="mb-3">
                    <label for="username" class="form-label">
                        <i class="fas fa-user me-2"></i>Username
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-user-circle"></i>
                        </span>
                        <InputText id="username" @bind-Value="loginModel.Username" 
                                   class="form-control" placeholder="Enter your username" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
                </div>

                <div class="mb-4">
                    <label for="password" class="form-label">
                        <i class="fas fa-lock me-2"></i>Password
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-key"></i>
                        </span>
                        <InputText id="password" type="@(showPassword ? "text" : "password")" 
                                   @bind-Value="loginModel.Password" 
                                   class="form-control" placeholder="Enter your password" />
                        <button class="btn btn-outline-secondary" type="button" 
                                @onclick="() => showPassword = !showPassword">
                            <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                </div>

                <div class="mb-3 form-check">
                    <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                    <label class="form-check-label" for="rememberMe">
                        Remember me
                    </label>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Signing in...</span>
                        }
                        else
                        {
                            <i class="fas fa-sign-in-alt me-2"></i>
                            <span>Sign In</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>

        <div class="login-footer">
            <p class="text-muted mb-0">
                <i class="fas fa-shield-alt me-2"></i>
                Secure login powered by EV Rental System
            </p>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 450px;
        overflow: hidden;
    }

    .login-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem 2rem 2rem;
        text-align: center;
    }

    .login-header h2 {
        color: white;
        font-weight: 600;
    }

    .logo-section i {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
        }
    }

    .login-body {
        padding: 2rem;
    }

    .login-footer {
        background-color: #f8f9fa;
        padding: 1.5rem;
        text-align: center;
        border-top: 1px solid #dee2e6;
    }

    .input-group-text {
        background-color: #f8f9fa;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        transition: transform 0.2s;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-primary:disabled {
        transform: none;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private bool showPassword = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if already logged in
        var isAuthenticated = await AuthService.IsAuthenticated();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/paymentcuongclas/PaymentCuongClaList");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var user = await _serviceProviders._systemUserAccountService
                .GetUserAccount(loginModel.Username, loginModel.Password);

            if (user != null && user.IsActive)
            {
                await AuthService.Login(user);
                Navigation.NavigateTo("/paymentcuongclas/PaymentCuongClaList", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid username or password, or account is inactive.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
