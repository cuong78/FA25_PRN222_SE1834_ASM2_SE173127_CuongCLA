@page "/PaymentCuongClas/PaymentCuongClaForm"
@page "/PaymentCuongClas/PaymentCuongClaForm/{Id:int?}"
@using zEVRental.Repositories.CuongCLA.Models
@using System.ComponentModel.DataAnnotations
@inject zEVRental.Services.CuongCLA.IServiceProviders _serviceProviders
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-credit-card me-2"></i>
                        @(IsEditMode ? "Edit Payment" : "Create New Payment")
                    </h3>
                </div>
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading data...</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@paymentModel" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="row">
                                <!-- Booking Selection -->
                                <div class="col-md-6 mb-3">
                                    <label for="bookingId" class="form-label">Booking <span class="text-danger">*</span></label>
                                    <InputSelect id="bookingId" @bind-Value="paymentModel.BookingId" class="form-select">
                                        <option value="0">-- Select Booking --</option>
                                        @if (bookingList != null)
                                        {
                                            @foreach (var booking in bookingList)
                                            {
                                                <option value="@booking.BookingCuongClaid">
                                                    @booking.Customer?.FullName - Booking #@booking.BookingCuongClaid (@booking.Status)
                                                </option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => paymentModel.BookingId)" class="text-danger" />
                                </div>

                                <!-- Payment Date -->
                                <div class="col-md-6 mb-3">
                                    <label for="paymentDate" class="form-label">Payment Date <span class="text-danger">*</span></label>
                                    <InputDate id="paymentDate" @bind-Value="paymentModel.PaymentDate" class="form-control" />
                                    <ValidationMessage For="@(() => paymentModel.PaymentDate)" class="text-danger" />
                                </div>

                                <!-- Amount -->
                                <div class="col-md-6 mb-3">
                                    <label for="amount" class="form-label">Amount <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <InputNumber id="amount" @bind-Value="paymentModel.Amount" class="form-control" step="0.01" />
                                    </div>
                                    <ValidationMessage For="@(() => paymentModel.Amount)" class="text-danger" />
                                </div>

                                <!-- Payment Method -->
                                <div class="col-md-6 mb-3">
                                    <label for="paymentMethod" class="form-label">Payment Method <span class="text-danger">*</span></label>
                                    <InputSelect id="paymentMethod" @bind-Value="paymentModel.PaymentMethod" class="form-select">
                                        <option value="">-- Select Payment Method --</option>
                                        <option value="Cash">Cash</option>
                                        <option value="Credit Card">Credit Card</option>
                                        <option value="Debit Card">Debit Card</option>
                                        <option value="Bank Transfer">Bank Transfer</option>
                                        <option value="Digital Wallet">Digital Wallet</option>
                                        <option value="Check">Check</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => paymentModel.PaymentMethod)" class="text-danger" />
                                </div>

                                <!-- Payment Status -->
                                <div class="col-md-6 mb-3">
                                    <label for="paymentStatus" class="form-label">Payment Status <span class="text-danger">*</span></label>
                                    <InputSelect id="paymentStatus" @bind-Value="paymentModel.PaymentStatus" class="form-select">
                                        <option value="">-- Select Status --</option>
                                        <option value="Pending">Pending</option>
                                        <option value="Completed">Completed</option>
                                        <option value="Failed">Failed</option>
                                        <option value="Cancelled">Cancelled</option>
                                        <option value="Refunded">Refunded</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => paymentModel.PaymentStatus)" class="text-danger" />
                                </div>

                                <!-- Processed By -->
                                <div class="col-md-6 mb-3">
                                    <label for="processedBy" class="form-label">Processed By</label>
                                    <InputSelect id="processedBy" @bind-Value="paymentModel.ProcessedBy" class="form-select">
                                        <option value="">-- Select User --</option>
                                        @if (userAccountList != null)
                                        {
                                            @foreach (var user in userAccountList)
                                            {
                                                <option value="@user.UserAccountId">@user.Email - @user.FullName</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => paymentModel.ProcessedBy)" class="text-danger" />
                                </div>

                                <!-- Is Deposit -->
                                <div class="col-md-6 mb-3">
                                    <div class="form-check mt-4">
                                        <InputCheckbox id="isDeposit" @bind-Value="paymentModel.IsDeposit" class="form-check-input" />
                                        <label class="form-check-label" for="isDeposit">
                                            Is Deposit Payment
                                        </label>
                                    </div>
                                </div>

                                <!-- Deposit Return Amount -->
                                <div class="col-md-6 mb-3">
                                    <label for="depositReturnAmount" class="form-label">Deposit Return Amount</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <InputNumber id="depositReturnAmount" @bind-Value="paymentModel.DepositReturnAmount" class="form-control" step="0.01" />
                                    </div>
                                    <ValidationMessage For="@(() => paymentModel.DepositReturnAmount)" class="text-danger" />
                                </div>

                                <!-- Notes -->
                                <div class="col-12 mb-3">
                                    <label for="notes" class="form-label">Notes</label>
                                    <InputTextArea id="notes" @bind-Value="paymentModel.Notes" class="form-control" rows="3" placeholder="Enter any additional notes..." />
                                    <ValidationMessage For="@(() => paymentModel.Notes)" class="text-danger" />
                                </div>
                            </div>

                            <!-- Form Buttons -->
                            <div class="row">
                                <div class="col-12">
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary" disabled="@IsProcessing">
                                            @if (IsProcessing)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-save me-2"></i>
                                            }
                                            @(IsEditMode ? "Update Payment" : "Create Payment")
                                        </button>
                                        <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                            <i class="fas fa-times me-2"></i>Cancel
                                        </button>
                                        @if (IsEditMode)
                                        {
                                            <button type="button" class="btn btn-danger" @onclick="DeletePayment" disabled="@IsProcessing">
                                                <i class="fas fa-trash me-2"></i>Delete
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private PaymentFormModel paymentModel = new();
    private List<BookingCuongCla>? bookingList;
    private List<SystemUserAccount>? userAccountList;
    private bool IsLoading = true;
    private bool IsProcessing = false;
    private bool IsEditMode => Id.HasValue && Id.Value > 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load dropdown data
            await LoadDropdownData();

            if (IsEditMode)
            {
                await LoadPaymentForEdit();
            }
            else
            {
                // Initialize with default values for new payment
                paymentModel.PaymentDate = DateTime.Today;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadDropdownData()
    {
        try
        {
            bookingList = await _serviceProviders._bookingCuongClaService.GetAllAsync();
            userAccountList = await _serviceProviders._systemUserAccountService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading dropdown data: {ex.Message}");
        }
    }

    private async Task LoadPaymentForEdit()
    {
        try
        {
            var payment = await _serviceProviders._IpaymentCuongClaService.GetByIdAsync(Id.Value);
            if (payment != null && payment.PaymentCuongClaid > 0)
            {
                paymentModel = new PaymentFormModel
                {
                    PaymentCuongClaid = payment.PaymentCuongClaid,
                    BookingId = payment.BookingId,
                    PaymentDate = payment.PaymentDate,
                    Amount = payment.Amount,
                    PaymentMethod = payment.PaymentMethod,
                    PaymentStatus = payment.PaymentStatus,
                    IsDeposit = payment.IsDeposit,
                    Notes = payment.Notes,
                    DepositReturnAmount = payment.DepositReturnAmount,
                    ProcessedBy = payment.ProcessedBy
                };
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Payment not found!");
                Navigation.NavigateTo("/paymentcuongclas/PaymentCuongClaList");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading payment: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        IsProcessing = true;
        try
        {
            var payment = new PaymentCuongCla
            {
                PaymentCuongClaid = paymentModel.PaymentCuongClaid,
                BookingId = paymentModel.BookingId,
                PaymentDate = paymentModel.PaymentDate,
                Amount = paymentModel.Amount,
                PaymentMethod = paymentModel.PaymentMethod,
                PaymentStatus = paymentModel.PaymentStatus,
                IsDeposit = paymentModel.IsDeposit,
                Notes = paymentModel.Notes,
                DepositReturnAmount = paymentModel.DepositReturnAmount,
                ProcessedBy = paymentModel.ProcessedBy
            };

            int result;
            if (IsEditMode)
            {
                result = await _serviceProviders._IpaymentCuongClaService.UpdateAsync(payment);
                if (result > 0)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Payment updated successfully!");
                }
            }
            else
            {
                result = await _serviceProviders._IpaymentCuongClaService.CreateAsync(payment);
                if (result > 0)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Payment created successfully!");
                }
            }

            if (result > 0)
            {
                Navigation.NavigateTo("/paymentcuongclas/PaymentCuongClaList");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Operation failed. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving payment: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task DeletePayment()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this payment?"))
        {
            IsProcessing = true;
            try
            {
                var success = await _serviceProviders._IpaymentCuongClaService.DeleteAsync(Id.Value);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Payment deleted successfully!");
                    Navigation.NavigateTo("/paymentcuongclas/PaymentCuongClaList");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete payment.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting payment: {ex.Message}");
            }
            finally
            {
                IsProcessing = false;
            }
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/paymentcuongclas/PaymentCuongClaList");
    }

    // Form model with validation attributes
    public class PaymentFormModel
    {
        public int PaymentCuongClaid { get; set; }

        [Required(ErrorMessage = "Booking is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a valid booking")]
        public int BookingId { get; set; }

        [Required(ErrorMessage = "Payment date is required")]
        public DateTime PaymentDate { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "Amount is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than 0")]
        public decimal Amount { get; set; }

        [Required(ErrorMessage = "Payment method is required")]
        [StringLength(50, ErrorMessage = "Payment method cannot exceed 50 characters")]
        public string PaymentMethod { get; set; } = string.Empty;

        [Required(ErrorMessage = "Payment status is required")]
        [StringLength(20, ErrorMessage = "Payment status cannot exceed 20 characters")]
        public string PaymentStatus { get; set; } = string.Empty;

        public bool IsDeposit { get; set; }

        [StringLength(500, ErrorMessage = "Notes cannot exceed 500 characters")]
        public string? Notes { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Deposit return amount must be non-negative")]
        public decimal? DepositReturnAmount { get; set; }

        public int? ProcessedBy { get; set; }
    }
}
