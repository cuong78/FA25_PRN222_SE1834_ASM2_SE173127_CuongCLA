// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace zEVRental.Repositories.CuongCLA.Models;

public partial class FA25_PRN222_SE1834_G3_EVRentalContext : DbContext
{
    public FA25_PRN222_SE1834_G3_EVRentalContext()
    {
    }

    public FA25_PRN222_SE1834_G3_EVRentalContext(DbContextOptions<FA25_PRN222_SE1834_G3_EVRentalContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BookingCuongCla> BookingCuongClas { get; set; }

    public virtual DbSet<CustomerManagementConglt> CustomerManagementConglts { get; set; }

    public virtual DbSet<PaymentCuongCla> PaymentCuongClas { get; set; }

    public virtual DbSet<PricingPhatNt> PricingPhatNts { get; set; }

    public virtual DbSet<RentalTransactionsKhanhLq> RentalTransactionsKhanhLqs { get; set; }

    public virtual DbSet<StationHuyNd> StationHuyNds { get; set; }

    public virtual DbSet<StationOperationsHuyNd> StationOperationsHuyNds { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public virtual DbSet<TransactionChecklistResultsKhanhLq> TransactionChecklistResultsKhanhLqs { get; set; }

    public virtual DbSet<VehicleHaLth> VehicleHaLths { get; set; }

    public virtual DbSet<VehicleMaintenanceHistoryHaLth> VehicleMaintenanceHistoryHaLths { get; set; }

    public virtual DbSet<VehicleManagementPhatNt> VehicleManagementPhatNts { get; set; }

    public virtual DbSet<ViolationRecordConglt> ViolationRecordConglts { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);



    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=FA25_PRN222_SE1834_G3_EVRental;User ID=sa;Password=123456");


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BookingCuongCla>(entity =>
        {
            entity.HasKey(e => e.BookingCuongClaid).HasName("PK__BookingC__7A2FC338D72FFC29");

            entity.ToTable("BookingCuongCLA");

            entity.Property(e => e.BookingCuongClaid).HasColumnName("BookingCuongCLAID");
            entity.Property(e => e.ActualPickUpDate).HasColumnType("datetime");
            entity.Property(e => e.ActualReturnDate).HasColumnType("datetime");
            entity.Property(e => e.BookingDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DepositAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.PlannedPickUpDate).HasColumnType("datetime");
            entity.Property(e => e.PlannedReturnDate).HasColumnType("datetime");
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.TotalCost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.BookingCuongClas)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__BookingCu__Creat__66603565");

            entity.HasOne(d => d.Customer).WithMany(p => p.BookingCuongClas)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BookingCu__Custo__60A75C0F");

            entity.HasOne(d => d.Station).WithMany(p => p.BookingCuongClas)
                .HasForeignKey(d => d.StationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BookingCu__Stati__628FA481");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.BookingCuongClas)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BookingCu__Vehic__619B8048");
        });

        modelBuilder.Entity<CustomerManagementConglt>(entity =>
        {
            entity.HasKey(e => e.CustomerManagementCongltId).HasName("PK__Customer__633A6981ECBD0B7C");

            entity.ToTable("CustomerManagementConglt");

            entity.HasIndex(e => e.IdcardNumber, "UQ__Customer__2CEB983643C5C17E").IsUnique();

            entity.Property(e => e.CustomerManagementCongltId).HasColumnName("CustomerManagementCongltID");
            entity.Property(e => e.ActionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AverageRating)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.Complaint).HasMaxLength(1000);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IdcardNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IDCardNumber");
            entity.Property(e => e.NewStatus)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Notes).HasMaxLength(500);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PreviousStatus).HasMaxLength(20);
            entity.Property(e => e.Reason).HasMaxLength(500);
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RiskLevel).HasDefaultValue(0);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Active");
            entity.Property(e => e.TotalBookings).HasDefaultValue(0);
            entity.Property(e => e.TotalSpent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ViolationCongltId).HasColumnName("ViolationCongltID");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.CustomerManagementConglts)
                .HasForeignKey(d => d.UserAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CustomerM__UserA__5629CD9C");

            entity.HasOne(d => d.ViolationConglt).WithMany(p => p.CustomerManagementConglts)
                .HasForeignKey(d => d.ViolationCongltId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CustomerM__Viola__571DF1D5");
        });

        modelBuilder.Entity<PaymentCuongCla>(entity =>
        {
            entity.HasKey(e => e.PaymentCuongClaid).HasName("PK__PaymentC__CA0E17F47261B3F2");

            entity.ToTable("PaymentCuongCLA");

            entity.Property(e => e.PaymentCuongClaid).HasColumnName("PaymentCuongCLAID");
            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.DepositReturnAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PaymentStatus)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Booking).WithMany(p => p.PaymentCuongClas)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentCu__Booki__6A30C649");

            entity.HasOne(d => d.ProcessedByNavigation).WithMany(p => p.PaymentCuongClas)
                .HasForeignKey(d => d.ProcessedBy)
                .HasConstraintName("FK__PaymentCu__Proce__6C190EBB");
        });

        modelBuilder.Entity<PricingPhatNt>(entity =>
        {
            entity.HasKey(e => e.PricingPhatNtid).HasName("PK__PricingP__2904FD42C963BF6B");

            entity.ToTable("PricingPhatNT");

            entity.Property(e => e.PricingPhatNtid).HasColumnName("PricingPhatNTID");
            entity.Property(e => e.BasePrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.OffPeakMultiplier).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.PeakHourMultiplier).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.VehicleType)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RentalTransactionsKhanhLq>(entity =>
        {
            entity.HasKey(e => e.RentalTransactionsKhanhLqid).HasName("PK__RentalTr__A21EB43CF4769EBF");

            entity.ToTable("RentalTransactionsKhanhLQ");

            entity.Property(e => e.RentalTransactionsKhanhLqid).HasColumnName("RentalTransactionsKhanhLQID");
            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.SignaturePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Completed");
            entity.Property(e => e.TransactionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TransactionType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.VehicleCondition)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.Booking).WithMany(p => p.RentalTransactionsKhanhLqs)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RentalTra__Booki__787EE5A0");

            entity.HasOne(d => d.Customer).WithMany(p => p.RentalTransactionsKhanhLqs)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RentalTra__Custo__7A672E12");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.RentalTransactionsKhanhLqs)
                .HasForeignKey(d => d.UserAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RentalTra__UserA__797309D9");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.RentalTransactionsKhanhLqs)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RentalTra__Vehic__7B5B524B");
        });

        modelBuilder.Entity<StationHuyNd>(entity =>
        {
            entity.HasKey(e => e.StationHuyNdid).HasName("PK__StationH__6D358DFFC05AF01D");

            entity.ToTable("StationHuyND");

            entity.Property(e => e.StationHuyNdid).HasColumnName("StationHuyNDID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Latitude).HasColumnType("decimal(10, 8)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(11, 8)");
            entity.Property(e => e.StationName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<StationOperationsHuyNd>(entity =>
        {
            entity.HasKey(e => e.StationOperationsHuyNdid).HasName("PK__StationO__DF71626BC6771555");

            entity.ToTable("StationOperationsHuyND");

            entity.Property(e => e.StationOperationsHuyNdid).HasColumnName("StationOperationsHuyNDID");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CustomerSatisfactionRating).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.IssuesReported).HasDefaultValue(0);
            entity.Property(e => e.Notes).HasMaxLength(500);
            entity.Property(e => e.Revenue)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

            entity.HasOne(d => d.Station).WithMany(p => p.StationOperationsHuyNds)
                .HasForeignKey(d => d.StationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StationOp__Stati__3C69FB99");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.StationOperationsHuyNds)
                .HasForeignKey(d => d.UserAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StationOp__UserA__3D5E1FD2");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TransactionChecklistResultsKhanhLq>(entity =>
        {
            entity.HasKey(e => e.TransactionChecklistResultsKhanhLqid).HasName("PK__Transact__A29AED773B5E33B9");

            entity.ToTable("TransactionChecklistResultsKhanhLQ");

            entity.Property(e => e.TransactionChecklistResultsKhanhLqid).HasColumnName("TransactionChecklistResultsKhanhLQID");
            entity.Property(e => e.CheckedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

            entity.HasOne(d => d.CheckedByNavigation).WithMany(p => p.TransactionChecklistResultsKhanhLqs)
                .HasForeignKey(d => d.CheckedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Transacti__Check__02084FDA");

            entity.HasOne(d => d.Transaction).WithMany(p => p.TransactionChecklistResultsKhanhLqs)
                .HasForeignKey(d => d.TransactionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Transacti__Trans__01142BA1");
        });

        modelBuilder.Entity<VehicleHaLth>(entity =>
        {
            entity.HasKey(e => e.VehicleHaLthid).HasName("PK__VehicleH__68B0970860A7EE4F");

            entity.ToTable("VehicleHaLTH");

            entity.HasIndex(e => e.LicensePlate, "UQ__VehicleH__026BC15CA050B6CC").IsUnique();

            entity.Property(e => e.VehicleHaLthid).HasColumnName("VehicleHaLTHID");
            entity.Property(e => e.Color).HasMaxLength(20);
            entity.Property(e => e.CurrentStationId).HasColumnName("CurrentStationID");
            entity.Property(e => e.IsAvailable).HasDefaultValue(true);
            entity.Property(e => e.LastMaintenanceDate).HasColumnType("datetime");
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ManufacturingDate).HasColumnType("datetime");
            entity.Property(e => e.RentalPricePerHour).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Active");
            entity.Property(e => e.VehicleModel)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.CurrentStation).WithMany(p => p.VehicleHaLths)
                .HasForeignKey(d => d.CurrentStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VehicleHa__Curre__46E78A0C");
        });

        modelBuilder.Entity<VehicleMaintenanceHistoryHaLth>(entity =>
        {
            entity.HasKey(e => e.VehicleMaintenanceHistoryHaLthid).HasName("PK__VehicleM__B13EC75E3B3362B3");

            entity.ToTable("VehicleMaintenanceHistoryHaLTH");

            entity.Property(e => e.VehicleMaintenanceHistoryHaLthid).HasColumnName("VehicleMaintenanceHistoryHaLTHID");
            entity.Property(e => e.BatteryHealthAfter).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.BatteryHealthBefore).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.MaintenanceCost).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.MaintenanceDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MaintenanceType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(500);
            entity.Property(e => e.PartsReplaced).HasMaxLength(300);
            entity.Property(e => e.TechnicianName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.WarrantyStatus).HasMaxLength(50);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.VehicleMaintenanceHistoryHaLths)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__VehicleMa__Creat__4D94879B");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleMaintenanceHistoryHaLths)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VehicleMa__Vehic__4AB81AF0");
        });

        modelBuilder.Entity<VehicleManagementPhatNt>(entity =>
        {
            entity.HasKey(e => e.VehicleManagementPhatNtid).HasName("PK__VehicleM__D46B339E869A8440");

            entity.ToTable("VehicleManagementPhatNT");

            entity.Property(e => e.VehicleManagementPhatNtid).HasColumnName("VehicleManagementPhatNTID");
            entity.Property(e => e.ActionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MaintenanceCost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaintenanceType).HasMaxLength(50);
            entity.Property(e => e.NewStationId).HasColumnName("NewStationID");
            entity.Property(e => e.NewStatus)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.NextMaintenanceDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasMaxLength(500);
            entity.Property(e => e.PreviousStationId).HasColumnName("PreviousStationID");
            entity.Property(e => e.PreviousStatus).HasMaxLength(20);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.NewStation).WithMany(p => p.VehicleManagementPhatNtNewStations)
                .HasForeignKey(d => d.NewStationId)
                .HasConstraintName("FK__VehicleMa__NewSt__74AE54BC");

            entity.HasOne(d => d.PreviousStation).WithMany(p => p.VehicleManagementPhatNtPreviousStations)
                .HasForeignKey(d => d.PreviousStationId)
                .HasConstraintName("FK__VehicleMa__Previ__73BA3083");

            entity.HasOne(d => d.PricingRuleAppliedNavigation).WithMany(p => p.VehicleManagementPhatNts)
                .HasForeignKey(d => d.PricingRuleApplied)
                .HasConstraintName("FK__VehicleMa__Prici__75A278F5");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleManagementPhatNts)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VehicleMa__Vehic__71D1E811");
        });

        modelBuilder.Entity<ViolationRecordConglt>(entity =>
        {
            entity.HasKey(e => e.ViolationCongltId).HasName("PK__Violatio__124EBFBA49803DE3");

            entity.ToTable("ViolationRecordConglt");

            entity.Property(e => e.ViolationCongltId).HasColumnName("ViolationCongltID");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.PenaltyAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 2)");
            entity.Property(e => e.SeverityLevel).HasDefaultValue((byte)1);
            entity.Property(e => e.ViolationType)
                .IsRequired()
                .HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}